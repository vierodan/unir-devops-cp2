---
- name: ++++++++++ RUN NGINX CONTAINER WITH PODMAN ON AZURE VM ++++++++++
  hosts: webserver
  gather_facts: true
  remote_user: adminuser
  become: true
  vars:
    container_image: "avrcp2acr.azurecr.io/nginx:cp2"
    container_name: "nginxwebserver"
    host_port: 80  # Port on the Azure VM to be accessible from the internet
    container_port: 80  # Port on the container

  tasks:
    - name: Login to Azure CLI
      ansible.builtin.command: >
        az login --service-principal
        --username "{{ lookup('env', 'CLIENT_ID') }}"
        --password "{{ lookup('env', 'CLIENT_SECRET') }}"
        --tenant "{{ lookup('env', 'TENANT_ID') }}"
      register: az_login
      changed_when: az_login.rc != 0
      failed_when: az_login.rc != 0

    - name: Set Azure subscription
      ansible.builtin.command: >
        az account set --subscription "{{ lookup('env', 'SUBSCRIPTION_ID') }}"
      register: az_account_set
      changed_when: az_account_set.rc != 0
      failed_when: az_account_set.rc != 0

    - name: Get ACR login access token
      ansible.builtin.command: >
        az acr login --name {{ lookup('env', 'ACR_NAME') }} --expose-token
      register: acr_login_result
      changed_when: acr_login_result.rc != 0
      failed_when: acr_login_result.rc != 0

    - name: Parse ACR login access token
      ansible.builtin.set_fact:
        acr_access_token: "{{ acr_login_result.stdout | from_json | json_query('accessToken') }}"

    - name: Log in to Azure Container Registry with Podman using access token
      ansible.builtin.command: >
        podman login {{ lookup('env', 'ACR_NAME') }}.azurecr.io -u 00000000-0000-0000-0000-000000000000 -p "{{ acr_access_token }}"
      register: login_result
      changed_when: login_result.rc != 0
      failed_when: login_result.rc != 0

    - name: Pull container image from Azure Container Registry
      containers.podman.podman_image:
        name: "{{ container_image }}"
        state: present
      register: pull_result
      changed_when: pull_result.changed == true
      failed_when: pull_result.stderr is defined and pull_result.stderr != ""

    - name: Run container using Podman with port mapping
      containers.podman.podman_container:
        name: "{{ container_name }}"
        image: "{{ container_image }}"
        state: started
        publish:
          - "{{ host_port }}:{{ container_port }}"
      register: run_result
      changed_when: run_result.changed
      failed_when: run_result.container.State.Status == 'failed'

    - name: Check if container nginx is running
      containers.podman.podman_container_info:
        name: "{{ container_name }}"
      register: container_info
      changed_when: false  # Esta tarea solo recoge informaciÃ³n, no cambia nada
      failed_when: >-
        container_info.containers | length == 0 or
        (container_info.containers | map(attribute='State') | map(attribute='Status') | first) != 'running'


    - name: Set fact if container is running
      ansible.builtin.set_fact:
        container_running: "{{ container_info.containers | selectattr('State.Status', 'equalto', 'running') | list | length > 0 }}"

    - name: Debug container running status
      ansible.builtin.debug:
        var: container_running
